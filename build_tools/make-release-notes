#!/bin/bash

# create a basic relase note page for a larsoft release

# Subsidiary packages to be checkedc, These must be in order.
declare -a packages=(larana larreco larsim  larevt lardata larcore)
declare -a extra_packages=(lareventdisplay larexamples larpandora)

function get_working_dir() 
{
    ( cd / ; /bin/pwd -P ) >/dev/null 2>&1
    if (( $? == 0 )); then
      pwd_P_arg="-P"
    fi
    cd ${currentDir}
    cd ${working_dir}/${larsoft_version}
    reldir=`dirname ${0}`
    my_working_dir=`cd ${reldir} && /bin/pwd ${pwd_P_arg}`
}

function get_package_release()
{
  local pkg=$1
  pv=`grep    -e '^[ 	]*'"$pkg"'[ 	]\{1,\}' ${my_working_dir}/${last_pkg}/ups/product_deps | \
   sed -e 's/^[ 	]*'"$pkg"'[ 	]\{1,\}\(v[^ 	]*\).*$/\1/'`
  if [[ -n "$pv" ]]; then
    echo "Found $package tag $pv corresponding to LArSoft tag $larsoft_version."
  else
    echo "Could not find tag for package $package corresponding to LArSoft tag $larsoft_version." 1>&2
    continue
  fi
  set -x
  cd ${my_working_dir}
  git clone http://cdcvs.fnal.gov/projects/${pkg} || { echo "ERROR: failed to clone ${pkg}"; exit 1; }
  cd ${my_working_dir}/${pkg}
  git co ${pv}
  relver=`grep '^[  ]*parent' ${my_working_dir}/${pkg}/ups/product_deps | tr "\t" " " | cut -f3 -d" "`
  echo "h2. ${pkg} ${relver}" >> ${relnote}
  echo >> ${relnote}
  cd ${my_working_dir}
  set +x
}

prog=${0##*/}

function usage() {
    cat 1>&2 <<EOF
${prog} --help|-h|-\?
${prog} <working_directory> <tag>
EOF
}

getopt -T >/dev/null 2>&1
if (( $? != 4 )); then
  echo "ERROR: GNU getopt required! Check SETUP_GETOPT and PATH." 1>&2
  exit 1
fi

TEMP=`getopt -n "$prog" -o ':h\?' --long help -- "${@}"`
currentDir=${PWD}

eval set -- "$TEMP"
while true; do
  case $1 in
    --help|-h|-\?)
      usage
      exit 1
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "Bad argument \"$1\"" 1>&2
      usage
      exit 1
  esac
done

[[ -z "$1" ]] && { 
  echo "Require working directory as non-option argument" 1>&2; usage; exit 1; }
[[ -z "$2" ]] && { echo "Require existing LArSoft tag as non-option argument" 1>&2; usage; exit 1; }

working_dir=$1
larsoft_version=$2

# create ${working_dir}/${larsoft_version}
cd ${currentDir}
if [ -d ${working_dir}/${larsoft_version} ]; then
        echo "ERROR: ${working_dir}/${larsoft_version} already exists!"
        exit 5
fi
mkdir -p ${working_dir}/${larsoft_version}
get_working_dir

relnote=${my_working_dir}/ReleaseNotes-${larsoft_version}
rm -f ${relnote}
echo "h1. LArSoft ${larsoft_version} Release Notes" > ${relnote}
echo >> ${relnote}

set -x
cd ${my_working_dir}
git clone http://cdcvs.fnal.gov/projects/larsoft || { echo "ERROR: failed to clone larsoft"; exit 1; }
cd ${my_working_dir}/larsoft
git co ${larsoft_version}
pkg=larsoft
relver=`grep '^[  ]*parent' ${my_working_dir}/${pkg}/ups/product_deps | tr "\t" " " | cut -f3 -d" "`
echo "h2. ${pkg} ${relver}" >> ${relnote}
echo >> ${relnote}
cd ${my_working_dir}
set +x
last_pkg=larsoft

for package in "${extra_packages[@]}"; do
  last_pkg=larsoft
  get_package_release ${package}
done
last_pkg=larsoft

for package in "${packages[@]}"; do
  get_package_release ${package}
  last_pkg=${package}
done
